@page "/addIn-items"
@inject AddInItemsServices AddInItemsServices
@inject NavigationManager NavigationManager
@inject OrderItemServices OrderItemServices

<MudTable Items="@Elements"
          Dense="@dense"
          Hover="@hover"
          Bordered="@bordered"
          Striped="@striped"
          Filter="new Func<AddInItem,bool>(FilterFunc1)">

    <ToolBarContent>
        <MudText>Add-In Items List</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>


    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Price">Rs.@context.Price</MudTd>
            <MudTd DataLabel="Action">

                <MudIconButton Color="Color.Success" Icon="@Icons.Material.Filled.Edit" aria-label="Edit" OnClick="@(() => handleEdit(context.Id))"></MudIconButton>

                <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.AddShoppingCart" aria-label="Cart" OnClick="@(() => handleAddItemInCart(context.Id, context.Price))"></MudIconButton>
            </MudTd>
        </RowTemplate>

        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    @* <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
        <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
        <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
        <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>
        <MudSpacer />

    </div>*@

    @code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }

    private bool isUserStaff { get; set; }

    private void handleEdit(Guid addInItemID)
    {
        NavigationManager.NavigateTo($"/addIn-items/{addInItemID}");
    }

    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string _searchString1 = "";

    private IEnumerable<AddInItem> Elements = new List<AddInItem>();

    protected override void OnInitialized()
    {
        Elements = AddInItemsServices.GetAddInItemsListListFromJsonFile();
        isUserStaff = _globalState.CurrentUser.Role.ToString() == "Staff";
        _globalState.AppBarTitle = "Items";
    }

    private void handleAddItemInCart(Guid addInItemID, double itemPrice)
    {
        OrderItemServices.AddItemInOrderItemsList(_globalState.OrderItems, addInItemID, "add-in", itemPrice);
    }

    private bool FilterFunc1(AddInItem element) => FilterFunc(element, _searchString1);

    private bool FilterFunc(AddInItem element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (element.Price.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}