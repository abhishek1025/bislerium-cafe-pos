@page "/cart-items"
@inject CoffeeServices CoffeeServices
@inject OrderItemServices OrderItemServices
@inject AddInItemsServices AddInItemsServices

<MudTable Items="@Elements"
          Dense="@dense"
          Hover="@hover"
          Bordered="@bordered"
          Striped="@striped">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Order Items List</MudText>
        <MudSpacer />
        <MudText Typo="Typo.subtitle1">Total Amount: <b>Rs.@_totalAmount</b></MudText>
    </ToolBarContent>


    <HeaderContent>
        <MudTh>Item Name</MudTh>
        <MudTh>Item Type</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>Quantity</MudTh>
        <MudTh>Total</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="CoffeeType">@getOrderItemName(context.ItemID, context.ItemType)</MudTd>
            <MudTd DataLabel="Item Type">@context.ItemType</MudTd>
            <MudTd DataLabel="Price">Rs.@context.Price</MudTd>

            <MudTd DataLabel="Quantity">

                <MudIconButton Icon="@Icons.Material.Filled.Remove" aria-label="subtract" OnClick="@(() => ManageQuantity(context.OrderItemID, "subtract"))"></MudIconButton>

                <span>
                    @context.Quantity
                </span>

                <MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="add" OnClick="@(() => ManageQuantity(context.OrderItemID, "add"))"></MudIconButton>

    
            </MudTd>

            <MudTd DataLabel="Price">Rs.@context.TotalPrice</MudTd>
            <MudTd DataLabel="Action">
                <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="@(() => handleDeleteCartItem(context.OrderItemID))"></MudIconButton>
            </MudTd>
    </RowTemplate>

        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

    <div class="mt-5">
        <MudButton Variant="Variant.Filled" Class="mr-5" OnClick="clearCart">Clear Cart</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary">Checkout</MudButton>
    </div>

    @code {
    [CascadingParameter]
    private GlobalState _globalState { set; get; }

    private double _totalAmount { set; get; } = 0;


    private IEnumerable<OrderItem> Elements = new List<OrderItem>();

    private Coffee _coffee { set; get; }


    private String getOrderItemName(Guid itemID, string itemType)
    {
        if(itemType == "coffee")
        {
            Coffee coffee = CoffeeServices.GetCofeeDetailsByID(itemID.ToString());

            if (coffee != null)
            {
                return coffee.CoffeeType;
            }
        }
        else if (itemType == "add-in")
        {
            AddInItem addInItem = AddInItemsServices.GetAddInItemDetailsByID(itemID.ToString());

            if (addInItem != null)
            {
                return addInItem.Name;
            }

        }

        return "N/A";

    }

    private double calculateTotalAmount()
    {
        double totalAmount = 0;

        foreach (var item in Elements)
        {
            totalAmount += item.TotalPrice;
        }
        return totalAmount;
    }

    private void clearCart()
    {
        _globalState.OrderItems.Clear();
    }

    private void handleDeleteCartItem(Guid orderItemID)
    {
        OrderItemServices.DeleteItemInOrderItemsList(_globalState.OrderItems, orderItemID);
        _totalAmount = calculateTotalAmount();
    }

    private void ManageQuantity(Guid orderItemID, string action)
    {
        OrderItemServices.ManageQuantityOfOrderItem(_globalState.OrderItems, orderItemID, action);
        _totalAmount = calculateTotalAmount();
    }

    protected override void OnInitialized()
    {
        Elements = _globalState.OrderItems;
        _globalState.AppBarTitle = "Cart Items";
        _totalAmount = calculateTotalAmount();
    }

    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;

}
