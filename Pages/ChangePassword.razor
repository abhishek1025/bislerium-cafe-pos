@page "/change-password"

@inject UserServices UserServices


<div>
    <h1>Change Password</h1>
</div>

<div class="container-fluid mt-5">
    <div class="row">
        <div class="col-6 d-flex flex-column gap-y-3">
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <MudAlert Severity="Severity.Error">@_errorMessage</MudAlert>
            }
            else if (!string.IsNullOrEmpty(_sucessMessage))
            {
                <MudAlert Severity="Severity.Success">@_sucessMessage</MudAlert>
            }

            <MudTextField @bind-Value="_currentPassword" Label="Current Password" Variant="Variant.Outlined" InputType="@InputType.Password"></MudTextField>
            <MudTextField @bind-Value="_newPassword" Label="New Password" Variant="Variant.Outlined" InputType="@InputType.Password"></MudTextField>
            <MudTextField @bind-Value="_confirmPassword" Label="Confirm New Password" Variant="Variant.Outlined" InputType="@InputType.Password"></MudTextField>

            <div>
                <MudButton Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" @onclick="_changePasswordHandler"
                           Class="mt-5">
                    Change Password
                </MudButton>
            </div>
        </div>
   </div>
</div>


@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }

    [CascadingParameter]
    private Action<string> SetAppBarTitle { get; set; }

    protected sealed override void OnInitialized()
    {
        SetAppBarTitle.Invoke("Change Password");
    }

    private string _newPassword {set; get;}
    private string _currentPassword { set; get; }
    private string _confirmPassword { set; get; }

    private string _errorMessage { set; get; } = "";
    private string _sucessMessage { set; get; } = "";

    private void _changePasswordHandler()
    {
        try
        {
            if (String.IsNullOrEmpty(_currentPassword) || String.IsNullOrEmpty(_currentPassword) || String.IsNullOrEmpty(_currentPassword))
            {
                _errorMessage = "All fields are required. Please enter all details!!!";
                return;
            }

            if (_currentPassword == _newPassword)
            {
                _errorMessage = "New password must be different from current password.";
                return;
            }

            if (_newPassword != _confirmPassword)
            {
                _errorMessage = "Inccorect New Passwords";
                return;
            }

            _globalState.CurrentUser = UserServices.ChangePassword(_globalState.CurrentUser, _newPassword, _currentPassword);

            _sucessMessage = "Password is changed Sucessfully";

            _errorMessage = "";

            _newPassword = "";
            _confirmPassword = "";
            _currentPassword = "";
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }


    }
}

