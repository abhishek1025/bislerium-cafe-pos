@page "/change-password"

@inject UserServices UserServices
@inject ISnackbar Snackbar

<div style="width:500px;">
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Change Password</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Key" Color="Color.Default" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <MudAlert Class="mb-3" Severity="Severity.Error">@_errorMessage</MudAlert>
            }
            
            <MudTextField @bind-Value="_currentPassword" Label="Current Password" Variant="Variant.Outlined" InputType="@InputType.Password" Margin="Margin.Dense" ></MudTextField>
            <MudTextField @bind-Value="_newPassword" Label="New Password" Variant="Variant.Outlined" InputType="@InputType.Password" Margin="Margin.Dense" Class="my-5"></MudTextField>
            <MudTextField @bind-Value="_confirmPassword" Label="Confirm New Password" Variant="Variant.Outlined" InputType="@InputType.Password" Margin="Margin.Dense"></MudTextField>
        </MudCardContent>

        <MudCardActions>
            <MudButton Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" @onclick="_changePasswordHandler"
                       Class="mt-5">
                Change Password
            </MudButton>
        </MudCardActions>
    </MudCard>
</div>


@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }

    protected override void OnInitialized()
    {
        _globalState.AppBarTitle = "Change Password";
    }

    private string _newPassword { set; get; }
    private string _currentPassword { set; get; }
    private string _confirmPassword { set; get; }

    private string _errorMessage { set; get; } = "";

    private void _changePasswordHandler()
    {
        try
        {
            if (String.IsNullOrEmpty(_currentPassword) || String.IsNullOrEmpty(_currentPassword) || String.IsNullOrEmpty(_currentPassword))
            {
                _errorMessage = "All fields are required. Please enter all details!!!";
                return;
            }

            if (_currentPassword == _newPassword)
            {
                _errorMessage = "New password must be different from current password.";
                return;
            }

            if (_newPassword != _confirmPassword)
            {
                _errorMessage = "Incorrect New Passwords";
                return;
            }

            _globalState.CurrentUser = UserServices.ChangePassword(_globalState.CurrentUser, _newPassword, _currentPassword);


            Snackbar.Add("Password is changed Sucessfully", Severity.Success);

            _errorMessage = "";

            _newPassword = "";
            _confirmPassword = "";
            _currentPassword = "";
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }


    }
}
