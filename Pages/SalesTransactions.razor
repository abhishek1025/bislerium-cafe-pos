@page "/sales-transactions"
@inject OrderServices OrderServices

<style>
    .table-row {
        font-size: 14px;
    }
</style>


@if (Elements.Count() == 0)
{
    <MudAlert Severity="Severity.Info" Variant="Variant.Filled">No Transactions have been made yet !!</MudAlert>
}
else
{
    <MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped"
              Filter="new Func<Order,bool>(FilterFunc1)"
              HorizontalScrollbar="true"
              SortLabel="Sort By">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Sales Transactions</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh> <MudTableSortLabel SortBy="new Func<Order, object>(x => x.OrderID)"> Order ID</MudTableSortLabel></MudTh>
            <MudTh> <MudTableSortLabel SortBy="new Func<Order, object>(x => x.CustomerName)"> Customer Name</MudTableSortLabel></MudTh>
            <MudTh> <MudTableSortLabel SortBy="new Func<Order, object>(x => x.OrderDateTime)"> Order DateTime</MudTableSortLabel></MudTh>
            <MudTh> <MudTableSortLabel SortBy="new Func<Order, object>(x => x.OrderDateTime)"> Order Items</MudTableSortLabel></MudTh>
            <MudTh> <MudTableSortLabel SortBy="new Func<Order, object>(x => x.OrderTotalAmount)"> Order Total</MudTableSortLabel></MudTh>
            <MudTh> <MudTableSortLabel SortBy="new Func<Order, object>(x => x.DiscountAmount)"> Discount Amount</MudTableSortLabel></MudTh>
            <MudTh> Grand Total</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Order ID" Class="table-row">@context.OrderID</MudTd>
                <MudTd DataLabel="Customer Name" Class="table-row">
                    <MudChip Icon="@Icons.Material.Filled.Person" Color="Color.Primary" Size="Size.Small">@context.CustomerName</MudChip>
                </MudTd>

                <MudTd DataLabel="DateTime" Class="table-row">@context.OrderDateTime</MudTd>

                <MudTd>
                    <MudButton Variant="Variant.Filled" Color="Color.Info" Size="Size.Small"
                               OnClick="@(() => ShowBtnPress(context.OrderID))">

                        @((context.ShowOrderItems == true) ? "Hide" : "Show") Items
                    </MudButton>
                </MudTd>

                <MudTd DataLabel="Total Amount" Class="table-row">Rs.@context.OrderTotalAmount</MudTd>
                <MudTd DataLabel="Discount Amount" Class="table-row">Rs.@context.DiscountAmount</MudTd>
                <MudTd DataLabel="Grand Total" Class="table-row">Rs.@(context.OrderTotalAmount - context.DiscountAmount)</MudTd>
            </RowTemplate>

            <ChildRowContent>
                @if (context.ShowOrderItems)
            {
                <MudTr>
                    <td colspan="7">
                        <MudCard Elevation="0">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.body1"><span class="fw-bold">Details for Order #</span><strong>@context.OrderID</strong></MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent Class="pa-0">
                                <MudTable Items="@context.OrderItems" Context="OrderItemContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                    <ColGroup>
                                        <col />
                                        <col />
                                        <col style="width:200px;" />
                                    </ColGroup>
                                    <HeaderContent>
                                        <MudTh>Item Name</MudTh>
                                        <MudTh>Item Type</MudTh>
                                        <MudTh>Item Price</MudTh>
                                        <MudTh>Quantity</MudTh>
                                        <MudTh>Total Amount</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Item Name">@OrderItemContext.ItemName</MudTd>
                                        <MudTd DataLabel="Item Type">@OrderItemContext.ItemType</MudTd>
                                        <MudTd DataLabel="Item Type">Rs.@OrderItemContext.Price</MudTd>
                                        <MudTd DataLabel="Item Quantity">@OrderItemContext.Quantity</MudTd>
                                        <MudTd DataLabel="Total Amount">Rs.@OrderItemContext.TotalPrice</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudCardContent>
                        </MudCard>
                    </td>
                </MudTr>
                <br/>
            }
        </ChildRowContent>

            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

}

@code {
    [CascadingParameter] private GlobalState _globalSate { get; set; }

    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";

    private IEnumerable<Order> Elements = new List<Order>();

    protected override void OnInitialized()
    {
        Elements = OrderServices.GetOrdersFromJsonFile();
        _globalSate.AppBarTitle = "Sales Transactions";
    }

    private bool FilterFunc1(Order element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Order element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (element.OrderID.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (element.CustomerName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (element.OrderDateTime.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (element.OrderTotalAmount.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (element.DiscountAmount.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private void ShowBtnPress(Guid orderID)
    {
        Order order = Elements.First(o => o.OrderID == orderID);
        order.ShowOrderItems = !order.ShowOrderItems;
    }
}